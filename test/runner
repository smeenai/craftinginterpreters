#!/bin/bash
set -euo pipefail
interpreter="${1}"
test_dir="${2}"
input="${3}"
use_repl="${4:-}"

errexit() {
    echo >&2 "${1}"
    exit 1
}

here="$(dirname "${0}")"
input_file="${here}/${test_dir}/inputs/${input}"
output_file="${here}/${test_dir}/outputs/${input%%.*}"
[[ -f "${input_file}" ]] || errexit "Non-existent input ${input_file}"
[[ -f "${output_file}" ]] || errexit "Non-existent output ${output_file}"

interpreter_stdout="$(mktemp)"
interpreter_stderr="$(mktemp)"
cleanup_files=("${interpreter_stdout}" "${interpreter_stderr}")
cleanup() { rm -f "${cleanup_files[@]}"; }
trap cleanup EXIT

exitcode=0
if [[ "${use_repl}" == repl ]]; then
    "${interpreter}" < "${input_file}" > "${interpreter_stdout}" \
        2> "${interpreter_stderr}" || exitcode=$?
else
    "${interpreter}" "${input_file}" > "${interpreter_stdout}" \
        2> "${interpreter_stderr}" || exitcode=$?
fi

if (( exitcode != 0 )); then
    EX_DATAERR=65
    EX_SOFTWARE=70
    if [[ "${input}" == *.parseerror.* ]]; then
        (( exitcode == EX_DATAERR )) ||
            errexit "Unexpected exit code ${exitcode} for parse error test"
    elif [[ "${input}" == *.runtimeerror.* ]]; then
        (( exitcode == EX_SOFTWARE )) ||
            errexit "Unexpected exit code ${exitcode} for runtime error test"
    else
        errexit "Unexpected exit code ${exitcode} for success test"
    fi

    actual_output="${interpreter_stderr}"
    other_output="${interpreter_stdout}"
else
    actual_output="${interpreter_stdout}"
    other_output="${interpreter_stderr}"
fi

if ! git --no-pager diff --color --no-index --text --src-prefix=/ \
        --dst-prefix=/ "${output_file}" "${actual_output}"; then
    # Keep the mismatched output around for later examination
    cleanup_files=("${other_output}")
    exit 1
fi
